@page "/fetchdata"
@using MyFamily.Models.JsonSystemText
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (forecasts.Details is null)
    {
        <p><em>No data returned (@forecasts.StatusMessage)</em></p>
    }
    else
    {
        <p><em>@forecasts.Details.Count rows returned from server (V@forecasts.ServerVersion)</em></p>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts.Details)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private WeatherBundle? forecasts = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = null;
            forecasts = await Http.GetFromJsonAsync<WeatherBundle>("/api/WeatherForecast");
        }
        catch (Exception ex)
        {
            forecasts = new WeatherBundle { StatusMessage = "HttpGet failed" };
            Console.WriteLine(ex.ToString());
        }
    }
}
